#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <ctype.h>
#include <sys/wait.h>
#include <sys/neutrino.h>

int main(void) {
	pid_t pid;
	pid_t wpid;
	int status;
	int channelId;
	int channelS;

	if((channelId = ChannelCreate())==-1)
	{
		perror("ChannelCreate");
		return EXIT_FAILURE;
	}

	if((pid = fork())==-1)	//tworzenie rozdzialu na dwa procesy
	{
		perror("fork");
		return EXIT_FAILURE;
	}

	if(pid ==0)		//obsluga procesu potomnego
	{
		printf("Witam w kliencie!\n");
		int connection = ConnectAttach(NULL,getpid(),channelId,0,NULL);
		print("Polaczenie \n");
		ConnectDetach(connection);
		return EXIT_SUCCESS;
	}
	else			//obsluyga procesu macierzystego
	{
		printf("Witam w hoscie!\n PID: %d\n",pid);
	      do {
	        wpid = waitpid( pid, &status, 0 );
	      } while( WIFEXITED( status ) == 0 ); //oczekiwanie na zamkniecie klienta
	      //printf(status);
	      if((channelS = ChannelDestroy(channelId))==-1) //zamykamy kanal
	      {
	  		perror("ChannelDestroy");
	  		return EXIT_FAILURE;
	      }
	      return WEXITSTATUS( status );
	}
	return EXIT_SUCCESS;
}
